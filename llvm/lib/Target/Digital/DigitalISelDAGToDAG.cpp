//===-- DigitalISelDAGToDAG.cpp - A dag to dag inst selector for Digital ------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Digital target.
//
//===----------------------------------------------------------------------===//

#include "Digital.h"
#include "MCTargetDesc/DigitalMCTargetDesc.h"
#include "DigitalTargetMachine.h"
#include "llvm/CodeGen/MachineConstantPool.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGNodes.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/CFG.h"
#include "llvm/IR/GlobalValue.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/Type.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Target/TargetMachine.h"
using namespace llvm;

#define DEBUG_TYPE "digital-isel"

// Digital-specific code to select Digital machine instructions for
// SelectionDAG operations.
namespace {
class DigitalDAGToDAGISel final : public SelectionDAGISel {
public:
  explicit DigitalDAGToDAGISel(DigitalTargetMachine &TargetMachine)
      : SelectionDAGISel(TargetMachine) {}

  StringRef getPassName() const override {
    return "Digital DAG->DAG Pattern Instruction Selection";
  }

  void Select(SDNode *Node) override;
  bool SelectAddr(SDNode *Parent, SDValue Addr, SDValue &Base, SDValue &Offset);

// Include the pieces autogenerated from the target description.
#include "DigitalGenDAGISel.inc"
};
}

void DigitalDAGToDAGISel::Select(SDNode *Node) {
  if (Node->isMachineOpcode()) {
    Node->setNodeId(-1);
    return;
  }
  SelectCode(Node);
}

bool DigitalDAGToDAGISel::SelectAddr(SDNode *Parent, SDValue Addr, SDValue &Base, SDValue &Offset) {
  return true;
}

// This pass converts a legalized DAG into a Digital-specific DAG, ready
// for instruction scheduling.
FunctionPass *llvm::createDigitalISelDag(DigitalTargetMachine &TM) {
  return new DigitalDAGToDAGISel(TM);
}